{"version":3,"sources":["Components/Output.js","Components/controls/select.js","Components/controls/text.js","App.js","serviceWorker.js","index.js"],"names":["Output","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","value","react_default","a","createElement","className","Component","Select","e","setState","target","onChange","bind","Text","type","App","paras","html","text","getSampleText","_this2","axios","get","then","response","data","console","log","catch","err","x","number","controls_text","changeParas","controls_select","showHtml","Components_Output","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ba233cd5.chunk.js","sourcesContent":["import React, {Component} from 'react';\n\nclass Output extends Component{\n  constructor(props){\n    super(props);\n    this.state = {\n      value: props.value\n    }\n  }\n  render(){\n    return(\n      <div className=\"well output\">\n        {this.props.value}\n      </div>\n    )\n  }\n\n}\n\nexport default Output;\n","import React, {Component} from 'react';\n\nclass Select extends Component{\n  constructor(props){\n    super(props);\n    this.state = {\n      value: props.value\n    }\n  }\n  onChange(e){\n    this.setState({value: e.target.value}, function(){\n      this.props.onChange(this.state.value);\n    });\n  }\n\n  render(){\n    return(\n      <div className=\"well output\">\n        <select className=\"form-control\" onChange={this.onChange.bind(this)}>\n        <option value=\"true\">Yes</option>\n        <option value=\"false\">No</option>\n        </select>\n      </div>\n    )\n  }\n\n}\n\nexport default Select;\n","import React, {Component} from 'react';\n\nclass Text extends Component{\n  constructor(props){\n    super(props);\n    this.state = {\n      value: props.value\n    }\n  }\n\n  onChange(e){\n    this.setState({value: e.target.value}, function(){\n      this.props.onChange(this.state.value);\n    });\n  }\n\n  render(){\n    return (\n      <div>\n        <input className=\"form-control\" type=\"number\" value={this.state.value} onChange={this.onChange.bind(this)} />\n      </div>\n    )\n  }\n}\n\nexport default Text;\n","import React, { Component } from 'react';\nimport './App.css';\nimport Output from './Components/Output';\nimport Select from './Components/controls/select';\nimport Text from './Components/controls/text';\nimport axios from 'axios';\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      paras: 4,\n      html: true,\n      text: ''\n    }\n  }\n\n  componentWillMount(){\n    this.getSampleText();\n  }\n\n  getSampleText(){\n    axios.get('http://hipsterjesus.com/api?paras='+this.state.paras+'&html='+this.state.html)\n      .then((response) => {\n        this.setState({text: response.data.text}, function(){\n          console.log(this.state);\n        });\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  }\n\n  showHtml(x){\n      this.setState({html: x}, this.getSampleText);\n  }\n\n  changeParas(number){\n      this.setState({paras: number}, this.getSampleText);\n  }\n\n  render() {\n    return (\n      <div className=\"App container\">\n        <h1 className=\"text-center\">ReactJS Sample Text Generator</h1>\n        <hr />\n        <form className=\"form-inline\">\n          <div className=\"form-group\">\n            <label>Paragraphs:</label>\n            <Text value={this.state.paras} onChange={this.changeParas.bind(this)} />\n          </div>\n          <div className=\"form-group\">\n            <label>Include HTML:</label>\n            <Select value={this.state.html} onChange={this.showHtml.bind(this)} />\n          </div>\n        </form>\n        <br /><br />\n        <Output value={this.state.text} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}